---
name: Task - Rust Tests & Coverage

on:
  workflow_dispatch:
  workflow_call:

jobs:
  coverage:
    # sadly, for now we have to "rebuild" for the coverage
    runs-on: ubuntu-latest

    env:
      HOST: 0.0.0.0
      PORT: 8080
      DATABASE_URL: postgres://postgres:postgres@localhost:5432
      AWS_REGION: eu-west-3
      LOCALSTACK_ENDPOINT: http://localhost:4566
      BINARY_BASE_PATH: /bin
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      APIBARA_AUTH_TOKEN: ${{ secrets.APIBARA_AUTH_TOKEN }}
      APIBARA_REDIS_URL: http://localhost:2379
      INDEXER_SERVICE_BUCKET: indexer-service
      GCS_ENDPOINT_URL: http://localhost:4443
      GCS_BUCKET_NAME: test-bucket
      GCS_SERVICE_ACCOUNT: /tmp/gcs-sa.json

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
          - 4571:4571
          - 8080:8080
        options: >-
          --health-cmd "curl -k https://localhost:4566"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379

      fake-gcs:
        image: tustvold/fake-gcs-server
        ports:
          - 4443:4443
        options: >-
          --health-cmd "curl -f http://localhost:4443/storage/v1/b"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          STORAGE_BACKEND: memory
          SCHEME: http
          PUBLIC_HOST: localhost:4443
          EXTERNAL_URL: localhost:4443

    steps:
      - uses: actions/checkout@v3

      - name: Setup GCS service account
        run: |
          echo '{"type":"service_account","project_id":"test-project","private_key_id":"mock","private_key":"mock","client_email":"test@test-project.iam.gserviceaccount.com","client_id":"mock","auth_uri":"mock","token_uri":"mock","auth_provider_x509_cert_url":"mock","client_x509_cert_url":"mock"}' > /tmp/gcs-sa.json

      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key
      - run: rustup show

      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest

      - name: Download sink binaries
        run: |
          wget https://github.com/apibara/dna/releases/download/sink-webhook/v0.7.0/sink-webhook-x86_64-linux.gz
          gunzip sink-webhook-x86_64-linux.gz
          sudo cp sink-webhook-x86_64-linux /bin/sink-webhook
          sudo chmod 777 /bin/sink-webhook

          wget https://github.com/apibara/dna/releases/download/sink-postgres/v0.8.0/sink-postgres-x86_64-linux.gz
          gunzip sink-postgres-x86_64-linux.gz
          sudo cp sink-postgres-x86_64-linux /bin/sink-postgres
          sudo chmod 777 /bin/sink-postgres

          wget https://github.com/apibara/dna/releases/download/sink-console/v0.8.0/sink-console-x86_64-linux.gz
          gunzip sink-console-x86_64-linux.gz
          sudo cp sink-console-x86_64-linux /bin/sink-console
          sudo chmod 777 /bin/sink-console

      - name: Start LocalStack
        run: |
          pip install awscli-local

      - name: Create S3 Bucket
        run: |
          awslocal s3api create-bucket --bucket indexer-service --region eu-west-3 --create-bucket-configuration LocationConstraint=eu-west-3
          awslocal s3api put-object --bucket indexer-service --key apibara-scripts/
          awslocal s3api list-buckets 

      - name: Initialize GCS bucket
        run: |
          curl -X POST \
            --data-binary '{"name":"test-bucket"}' \
            -H "Content-Type: application/json" \
            "http://localhost:4443/storage/v1/b"

      - uses: Swatinem/rust-cache@v2

      - name: Clean workspace
        run: |
          cargo llvm-cov clean --workspace

      - name: Run llvm-cov
        run: |
          cargo llvm-cov nextest --release --test-threads=1 --lcov --output-path lcov.info

      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

      - uses: colpal/actions-clean@v1
        if: ${{ always() }} # To ensure this step runs even when earlier steps fail
